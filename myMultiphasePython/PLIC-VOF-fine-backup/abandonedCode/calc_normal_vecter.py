# 开发人员：leo
# 开发时间：2022/11/16 16:01

# 根据体积分数C计算出界面的法向量nx和ny

import numpy as np

"""
对网格作如下定义
up, down, left and right
        lu ————— ru
        |         |
        |         |
        ld ————— rd
"""


def calcnxy(dx, dy, C):
    # 定义中间变量
    lu = np.empty_like(C)
    ru = np.empty_like(C)
    ld = np.empty_like(C)
    rd = np.empty_like(C)
    nx = np.zeros_like(C)
    ny = np.zeros_like(C)

    # 计算x方向的法向量nx = dC/dx
    ru[1:-1, 1:-1] = 0.5 * (C[1:-1, 2:] - C[1:-1, 1:-1] + C[2:, 2:] - C[2:, 1:-1]) / dx
    lu[1:-1, 1:-1] = 0.5 * (C[1:-1, 1:-1] - C[1:-1, 0:-2] + C[2:, 1:-1] - C[2:, 0:-2]) / dx
    ld[1:-1, 1:-1] = 0.5 * (C[0:-2, 1:-1] - C[0:-2, 0:-2] + C[1:-1, 1:-1] - C[1:-1, 0:-2]) / dx
    rd[1:-1, 1:-1] = 0.5 * (C[0:-2, 2:] - C[0:-2, 1:-1] + C[1:-1, 2:] - C[1:-1, 1:-1]) / dx
    nx[1:-1, 1:-1] = (ru[1:-1, 1:-1] + lu[1:-1, 1:-1] + ld[1:-1, 1:-1] + rd[1:-1, 1:-1]) / 4

    # 计算y方向的法向量ny = dC/dy
    ru[1:-1, 1:-1] = 0.5 * (-C[1:-1, 2:] - C[1:-1, 1:-1] + C[2:, 2:] + C[2:, 1:-1]) / dy
    lu[1:-1, 1:-1] = 0.5 * (-C[1:-1, 1:-1] - C[1:-1, 0:-2] + C[2:, 1:-1] + C[2:, 0:-2]) / dy
    ld[1:-1, 1:-1] = 0.5 * (-C[0:-2, 1:-1] - C[0:-2, 0:-2] + C[1:-1, 1:-1] + C[1:-1, 0:-2]) / dy
    rd[1:-1, 1:-1] = 0.5 * (-C[0:-2, 2:] - C[0:-2, 1:-1] + C[1:-1, 2:] + C[1:-1, 1:-1]) / dy
    ny[1:-1, 1:-1] = (ru[1:-1, 1:-1] + lu[1:-1, 1:-1] + ld[1:-1, 1:-1] + rd[1:-1, 1:-1]) / 4

    """
    # 更新边界条件，因为边界外没有两相界面，法向取0
    nx[0, :] = 0  # 第0行，列是[:]
    nx[-1, :] = 0
    nx[:, 0] = 0
    nx[:, -1] = 0

    ny[0, :] = 0  # 第0行，列是[:]
    ny[-1, :] = 0
    ny[:, 0] = 0
    ny[:, -1] = 0
    """

    return nx, ny
